# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "120s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "60s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "telegraf" # required

  ## Retention policy to write to. Empty string writes to the default rp.
  retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "any"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "30s"
  username = "telegraf"
  password = "Telegraf123"
  ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
  user_agent = "telegraf"
  ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  insecure_skip_verify = true
  [outputs.influxdb.tagdrop]
    srv = ["linux"]
  namedrop = ["tempera*","dock*","dns*"]
  namepass = ["clients","exe*"]


# # Retrieves SNMP values from remote agents
[[inputs.snmp]]
  agents = [ "192.168.29.21:161","192.168.29.20:161" ]
  ## Timeout for each SNMP query.
  timeout = "5s"
  ## Number of retries to attempt within timeout.
  retries = 1
  ## SNMP version, values can be 1, 2, or 3
  version = 3

  ## SNMP community string.
  #community = "public"

  ## The GETBULK max-repetitions parameter
  max_repetitions = 10

  ## SNMPv3 auth parameters
  sec_name = "snmpv3admin1"
  auth_protocol = "SHA"      # Values: "MD5", "SHA", ""
  auth_password = "9FHkTkEuLQF2DcflKlPN"
  sec_level = "authPriv"   # Values: "noAuthNoPriv", "authNoPriv", "authPriv"
  context_name = ""
  priv_protocol = "AES"         # Values: "DES", "AES", ""
  priv_password = "ocdB9tjeTRMUBoSSzlVj"

  [[inputs.snmp.table]]
    ## measurement name
    name = "clients"
    inherit_tags = [ "hostname" ]
    [[inputs.snmp.table.field]]
      name = "AP_name"
      oid = ".1.3.6.1.4.1.4329.15.3.5.1.2.1.2"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "count"
      oid = ".1.3.6.1.4.1.4329.15.3.5.2.2.1.14"
      conversion = "int"
    [[inputs.snmp.table.field]]
      name = "location"
      oid = ".1.3.6.1.4.1.4329.15.3.5.1.2.1.30"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "zone"
      oid = ".1.3.6.1.4.1.4329.15.3.5.1.2.1.33"
      is_tag = true
